syntax = "proto3";

package myapp.v1;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "myapp/v2/post.proto";

extend google.protobuf.MessageOptions {
  string my_custom_message_option = 1565;
}

extend google.protobuf.FileOptions {
  string my_custom_file_option = 1565;
}

enum user_status {
  reserved 405;
  reserved 200 to 205;

  option allow_alias = true;

  USER_STATUS_UNSPECIFIED = 0;

  USER_STATUS_ACTIVE = 1;

  USER_STATUS_INACTIVE = 2;

  USER_STATUS_PASSIVE = 2;
}

enum referrers {
  REFERRERS_UNSPECIFIED = 0;

  REFERRERS_GITHUB = 1;

  REFERRERS_REDDIT = 2;
}

message User {
  reserved "one", "two";
  reserved 405;
  reserved 200 to 205;

  option (buf.validate.message) = {
    cel: [
      {
        id: "passwords_match", 
        message: "the passwords do not match", 
        expression: "this.password == this.repeated_password" 
      }
    ] 
  };

  enum tier {
    reserved "one", "two";
    reserved 405;
    reserved 200 to 205;

    TIER_UNSPECIFIED = 0;

    TIER_SILVER = 1;

    TIER_GOLD = 2;
  }

  enum favorite_category {
    FAVORITE_CATEGORY_UNSPECIFIED = 0;

    FAVORITE_CATEGORY_PETS = 1;

    FAVORITE_CATEGORY_COOKING = 2;
  }

  oneof activity {
    user_status user_current_status = 102;

    google.protobuf.Timestamp account_deletion_date = 103;
  }

  oneof contact {
    string email = 11 [
      (buf.validate.field) = {
        string: {
          email: true 
        } 
      }
    ];

    referrers referrer = 12;
  }

  uint64 id = 1;

  google.protobuf.Timestamp created_at = 2;

  google.protobuf.Timestamp updated_at = 3;

  repeated User best_friend = 4;

  string password = 5 [
    (buf.validate.field) = {
      string: {
        min_len: 8 
      } 
    }
  ];

  string repeated_password = 6 [
    (buf.validate.field) = {
      string: {
        min_len: 8 
      } 
    }
  ];

  user_status last_status = 7 [
    (buf.validate.field) = {
      enum: {
        defined_only: true 
      } 
    }
  ];

  map<int32, user_status> last_30_days_statuses = 8 [
    (buf.validate.field) = {
      map: {
        min_pairs: 30, 
        keys: {
          int32: {
            lt: 31 
          } 
        }, 
        values: {
          enum: {
            defined_only: true 
          } 
        } 
      } 
    }
  ];

  map<uint64, User> friends = 9;

  myapp.v2.Post last_post = 10;
}

message GetUserRequest {
  uint64 id = 1;

  google.protobuf.Timestamp created_at = 2;

  google.protobuf.Timestamp updated_at = 3;
}

service UserService {
  rpc GetUser (GetUserRequest) returns (User);

  rpc GetPostByUserId (myapp.v2.GetPostRequest) returns (myapp.v2.Post);
}
