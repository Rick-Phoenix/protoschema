syntax = "proto3";

package {{+ package }};

{%+ import "opt.proto.j2" as opts %}

{%~ for import in imports %}
{% if import.to_string() != name.to_string() %}
import "{{ import }}";
{% endif ~%}
{%~ endfor %}

{%~ for opt in options ~%}
  option {{+ opt.name +}} = {{+ opt.value.render()? }};
{%~ endfor %}

{%~ for extension in extensions ~%}
extend {{+ extension.get_target(name.as_ref(), package.as_ref()) +}} {
  {% for field in extension.fields ~%}
  {{+ field.kind +}}{{+ field.field_type.render_name(name.as_ref(), package.as_ref() ) +}} {{+ field.name +}} = {{+ field.tag +}}
  {%- if !field.options.is_empty() +%} [
    {% call opts::field_opts(&field.options) +%}
  ]
  {% endif %};
  {%~ endfor %}
}
{%~ endfor ~%}

{%~ for enum_ in enums ~%}
{{~ enum_ ~}}
{%~ endfor %}

{%~ for msg in messages ~%}
{{~ msg ~}}
{%~ endfor %}

{%~ for service in services ~%}
service {{+ service.name +}} {
{% filter indent(2) %}
{% if !service.options.is_empty() %}
{%+ call opts::get_options(service.options) %}
{%~ endif %}

{%~ for handler in service.handlers ~%}
rpc {{+ handler.name +}} ({{ handler.render_request(name.as_ref(), package.as_ref()) }}) returns ({{ handler.render_response(name.as_ref(), package.as_ref()) }})
{%- if !handler.options.is_empty() +%} { 
{% filter indent(2) %}
{%+ call opts::get_options(handler.options) %}
{%~ endfilter %}
}
{% endif %};
{%~ endfor ~%}
{% endfilter %}
}
{%~ endfor %}
